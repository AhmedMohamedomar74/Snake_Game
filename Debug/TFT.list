
TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000158c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016c8  080016c8  00020400  2**0
                  CONTENTS
  4 .ARM          00000000  080016c8  080016c8  00020400  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016c8  080016c8  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016c8  080016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016cc  080016cc  000116cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  080016d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000400  08001ad0  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08001ad0  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020429  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019a1  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aec  00000000  00000000  00021e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  00022900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ff  00000000  00000000  00022bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000179d  00000000  00000000  00022dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001974  00000000  00000000  0002456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004f4e  00000000  00000000  00025ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000994  00000000  00000000  0002ae30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  0002b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000400 	.word	0x20000400
 800014c:	00000000 	.word	0x00000000
 8000150:	080016a4 	.word	0x080016a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000404 	.word	0x20000404
 800016c:	080016a4 	.word	0x080016a4

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <EXTI_voidConfigure>:
#include "EXTI_interface.h"

static void (*EXTI_CallBacks[16])(void);  // Array to hold callback functions for each EXTI line

/* Function to configure EXTI */
void EXTI_voidConfigure(u8 copy_u8Line, u8 copy_u8Port, u8 copy_u8Mode, void (*callback)(void)) {
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	460b      	mov	r3, r1
 800067a:	71bb      	strb	r3, [r7, #6]
 800067c:	4613      	mov	r3, r2
 800067e:	717b      	strb	r3, [r7, #5]

	u8 local_u8RegIndex = copy_u8Line / 4;         // Determine the EXTICR register
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	73fb      	strb	r3, [r7, #15]
    u8 local_u8Position = (copy_u8Line % 4) * 4;   // Determine the position within the EXTICR register
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 0303 	and.w	r3, r3, #3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	73bb      	strb	r3, [r7, #14]

    /* Select the port for the EXTI line */
    AFIO->EXTICR[local_u8RegIndex] &= ~(0b1111 << local_u8Position);
 8000692:	4a40      	ldr	r2, [pc, #256]	; (8000794 <EXTI_voidConfigure+0x128>)
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	3302      	adds	r3, #2
 8000698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	210f      	movs	r1, #15
 80006a0:	fa01 f303 	lsl.w	r3, r1, r3
 80006a4:	43db      	mvns	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	493a      	ldr	r1, [pc, #232]	; (8000794 <EXTI_voidConfigure+0x128>)
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	4002      	ands	r2, r0
 80006ae:	3302      	adds	r3, #2
 80006b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    AFIO->EXTICR[local_u8RegIndex] |= (copy_u8Port << local_u8Position);
 80006b4:	4a37      	ldr	r2, [pc, #220]	; (8000794 <EXTI_voidConfigure+0x128>)
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	3302      	adds	r3, #2
 80006ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006be:	79b9      	ldrb	r1, [r7, #6]
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	fa01 f303 	lsl.w	r3, r1, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	4932      	ldr	r1, [pc, #200]	; (8000794 <EXTI_voidConfigure+0x128>)
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	4302      	orrs	r2, r0
 80006ce:	3302      	adds	r3, #2
 80006d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Configure the signal latch mode */
    switch(copy_u8Mode) {
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d032      	beq.n	8000740 <EXTI_voidConfigure+0xd4>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	dc45      	bgt.n	800076a <EXTI_voidConfigure+0xfe>
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <EXTI_voidConfigure+0x7c>
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d016      	beq.n	8000714 <EXTI_voidConfigure+0xa8>
 80006e6:	e040      	b.n	800076a <EXTI_voidConfigure+0xfe>
        case EXTI_RISING_EDGE:
            SET_BIT(EXTI->RTSR, copy_u8Line);   // Enable rising edge trigger
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <EXTI_voidConfigure+0x12c>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	79fa      	ldrb	r2, [r7, #7]
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a28      	ldr	r2, [pc, #160]	; (8000798 <EXTI_voidConfigure+0x12c>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]
            CLR_BIT(EXTI->FTSR, copy_u8Line);   // Disable falling edge trigger
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <EXTI_voidConfigure+0x12c>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	43d2      	mvns	r2, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a22      	ldr	r2, [pc, #136]	; (8000798 <EXTI_voidConfigure+0x12c>)
 800070e:	400b      	ands	r3, r1
 8000710:	60d3      	str	r3, [r2, #12]
            break;
 8000712:	e02a      	b.n	800076a <EXTI_voidConfigure+0xfe>
        case EXTI_FALLING_EDGE:
            SET_BIT(EXTI->FTSR, copy_u8Line);   // Enable falling edge trigger
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	2101      	movs	r1, #1
 800071c:	fa01 f202 	lsl.w	r2, r1, r2
 8000720:	4611      	mov	r1, r2
 8000722:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000724:	430b      	orrs	r3, r1
 8000726:	60d3      	str	r3, [r2, #12]
            CLR_BIT(EXTI->RTSR, copy_u8Line);   // Disable rising edge trigger
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <EXTI_voidConfigure+0x12c>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	2101      	movs	r1, #1
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	43d2      	mvns	r2, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <EXTI_voidConfigure+0x12c>)
 800073a:	400b      	ands	r3, r1
 800073c:	6093      	str	r3, [r2, #8]
            break;
 800073e:	e014      	b.n	800076a <EXTI_voidConfigure+0xfe>
        case EXTI_ON_CHANGE:
            SET_BIT(EXTI->RTSR, copy_u8Line);   // Enable both rising and falling edges
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f202 	lsl.w	r2, r1, r2
 800074c:	4611      	mov	r1, r2
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000750:	430b      	orrs	r3, r1
 8000752:	6093      	str	r3, [r2, #8]
            SET_BIT(EXTI->FTSR, copy_u8Line);
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	79fa      	ldrb	r2, [r7, #7]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	4611      	mov	r1, r2
 8000762:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000764:	430b      	orrs	r3, r1
 8000766:	60d3      	str	r3, [r2, #12]
            break;
 8000768:	bf00      	nop
    }
    /* Assign the callback function to the corresponding EXTI line */
    EXTI_CallBacks[copy_u8Line] = callback;
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	490b      	ldr	r1, [pc, #44]	; (800079c <EXTI_voidConfigure+0x130>)
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Enable the EXTI line */
    SET_BIT(EXTI->IMR, copy_u8Line);
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <EXTI_voidConfigure+0x12c>)
 8000784:	430b      	orrs	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40010000 	.word	0x40010000
 8000798:	40010400 	.word	0x40010400
 800079c:	2000041c 	.word	0x2000041c

080007a0 <EXTI0_IRQHandler>:

/* Example ISR for EXTI0 */

void EXTI0_IRQHandler(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
    /* Execute the assigned callback function */
    EXTI_CallBacks[0]();
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <EXTI0_IRQHandler+0x28>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4798      	blx	r3

    /* Clear the pending flag by writing 1 to it */
    u32 x = EXTI->PR;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <EXTI0_IRQHandler+0x2c>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	607b      	str	r3, [r7, #4]
    SET_BIT(EXTI->PR, 0);
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <EXTI0_IRQHandler+0x2c>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <EXTI0_IRQHandler+0x2c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6153      	str	r3, [r2, #20]
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000041c 	.word	0x2000041c
 80007cc:	40010400 	.word	0x40010400

080007d0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    // Execute the assigned callback function
    if (EXTI_CallBacks[0]!= NULL)
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <EXTI1_IRQHandler+0x24>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <EXTI1_IRQHandler+0x12>
	EXTI_CallBacks[1]();
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <EXTI1_IRQHandler+0x24>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4798      	blx	r3

   // Clear the pending flag by writing 1 to it
    SET_BIT(EXTI->PR, 1);
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <EXTI1_IRQHandler+0x28>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <EXTI1_IRQHandler+0x28>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6153      	str	r3, [r2, #20]
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000041c 	.word	0x2000041c
 80007f8:	40010400 	.word	0x40010400

080007fc <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	// Execute the assigned callback function
	    if (EXTI_CallBacks[1]!= NULL)
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <EXTI2_IRQHandler+0x24>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <EXTI2_IRQHandler+0x12>
		EXTI_CallBacks[2]();
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <EXTI2_IRQHandler+0x24>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4798      	blx	r3

	   // Clear the pending flag by writing 1 to it
	    SET_BIT(EXTI->PR, 2);
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <EXTI2_IRQHandler+0x28>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <EXTI2_IRQHandler+0x28>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6153      	str	r3, [r2, #20]
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000041c 	.word	0x2000041c
 8000824:	40010400 	.word	0x40010400

08000828 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	// Execute the assigned callback function
	    if (EXTI_CallBacks[2]!= NULL)
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <EXTI3_IRQHandler+0x24>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <EXTI3_IRQHandler+0x12>
		EXTI_CallBacks[3]();
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <EXTI3_IRQHandler+0x24>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	4798      	blx	r3

	   // Clear the pending flag by writing 1 to it
	    SET_BIT(EXTI->PR, 3);
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <EXTI3_IRQHandler+0x28>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <EXTI3_IRQHandler+0x28>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6153      	str	r3, [r2, #20]
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000041c 	.word	0x2000041c
 8000850:	40010400 	.word	0x40010400

08000854 <GPIO_voidSetPinDirection>:


#include "GPIO_interface.h"

void GPIO_voidSetPinDirection( u8 copy_u8PORT, u8 copy_u8PIN , u8 copy_u8Mode)
	{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	460b      	mov	r3, r1
 8000860:	71bb      	strb	r3, [r7, #6]
 8000862:	4613      	mov	r3, r2
 8000864:	717b      	strb	r3, [r7, #5]
			switch (copy_u8PORT)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d07a      	beq.n	8000962 <GPIO_voidSetPinDirection+0x10e>
 800086c:	2b02      	cmp	r3, #2
 800086e:	f300 80b1 	bgt.w	80009d4 <GPIO_voidSetPinDirection+0x180>
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <GPIO_voidSetPinDirection+0x28>
 8000876:	2b01      	cmp	r3, #1
 8000878:	d03a      	beq.n	80008f0 <GPIO_voidSetPinDirection+0x9c>
						copy_u8PIN = copy_u8PIN -8;
                        GPIOC_CRH &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
						GPIOC_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
						}
						break;
			default :break;
 800087a:	e0ab      	b.n	80009d4 <GPIO_voidSetPinDirection+0x180>
						if (copy_u8PIN <= 7)
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b07      	cmp	r3, #7
 8000880:	d817      	bhi.n	80008b2 <GPIO_voidSetPinDirection+0x5e>
						GPIOA_CRL &=~((0b1111)      << (copy_u8PIN * 4));
 8000882:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <GPIO_voidSetPinDirection+0x198>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	79ba      	ldrb	r2, [r7, #6]
 8000888:	0092      	lsls	r2, r2, #2
 800088a:	210f      	movs	r1, #15
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	43d2      	mvns	r2, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4a55      	ldr	r2, [pc, #340]	; (80009ec <GPIO_voidSetPinDirection+0x198>)
 8000896:	400b      	ands	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
						GPIOA_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4));
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <GPIO_voidSetPinDirection+0x198>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	7979      	ldrb	r1, [r7, #5]
 80008a0:	79ba      	ldrb	r2, [r7, #6]
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a50      	ldr	r2, [pc, #320]	; (80009ec <GPIO_voidSetPinDirection+0x198>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
						break;
 80008b0:	e092      	b.n	80009d8 <GPIO_voidSetPinDirection+0x184>
						else if (copy_u8PIN <= 15)
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	f200 808f 	bhi.w	80009d8 <GPIO_voidSetPinDirection+0x184>
						copy_u8PIN = copy_u8PIN -8;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	3b08      	subs	r3, #8
 80008be:	71bb      	strb	r3, [r7, #6]
                        GPIOA_CRH &=~((0b1111)      << (copy_u8PIN * 4)); 
 80008c0:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <GPIO_voidSetPinDirection+0x19c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	79ba      	ldrb	r2, [r7, #6]
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	210f      	movs	r1, #15
 80008ca:	fa01 f202 	lsl.w	r2, r1, r2
 80008ce:	43d2      	mvns	r2, r2
 80008d0:	4611      	mov	r1, r2
 80008d2:	4a47      	ldr	r2, [pc, #284]	; (80009f0 <GPIO_voidSetPinDirection+0x19c>)
 80008d4:	400b      	ands	r3, r1
 80008d6:	6013      	str	r3, [r2, #0]
						GPIOA_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4));
 80008d8:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <GPIO_voidSetPinDirection+0x19c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	7979      	ldrb	r1, [r7, #5]
 80008de:	79ba      	ldrb	r2, [r7, #6]
 80008e0:	0092      	lsls	r2, r2, #2
 80008e2:	fa01 f202 	lsl.w	r2, r1, r2
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a41      	ldr	r2, [pc, #260]	; (80009f0 <GPIO_voidSetPinDirection+0x19c>)
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
						break;
 80008ee:	e073      	b.n	80009d8 <GPIO_voidSetPinDirection+0x184>
						if (copy_u8PIN <= 7)
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	2b07      	cmp	r3, #7
 80008f4:	d817      	bhi.n	8000926 <GPIO_voidSetPinDirection+0xd2>
						GPIOB_CRL &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
 80008f6:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <GPIO_voidSetPinDirection+0x1a0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	79ba      	ldrb	r2, [r7, #6]
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	210f      	movs	r1, #15
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	43d2      	mvns	r2, r2
 8000906:	4611      	mov	r1, r2
 8000908:	4a3a      	ldr	r2, [pc, #232]	; (80009f4 <GPIO_voidSetPinDirection+0x1a0>)
 800090a:	400b      	ands	r3, r1
 800090c:	6013      	str	r3, [r2, #0]
						GPIOB_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 800090e:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <GPIO_voidSetPinDirection+0x1a0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	7979      	ldrb	r1, [r7, #5]
 8000914:	79ba      	ldrb	r2, [r7, #6]
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	4611      	mov	r1, r2
 800091e:	4a35      	ldr	r2, [pc, #212]	; (80009f4 <GPIO_voidSetPinDirection+0x1a0>)
 8000920:	430b      	orrs	r3, r1
 8000922:	6013      	str	r3, [r2, #0]
						break;
 8000924:	e05a      	b.n	80009dc <GPIO_voidSetPinDirection+0x188>
						else if (copy_u8PIN <= 15)
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d857      	bhi.n	80009dc <GPIO_voidSetPinDirection+0x188>
						copy_u8PIN = copy_u8PIN -8;
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	3b08      	subs	r3, #8
 8000930:	71bb      	strb	r3, [r7, #6]
                        GPIOB_CRH &=~((0b1111)      << ((copy_u8PIN) * 4)); //reset GPIO_CRL FOR ANYPIN
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <GPIO_voidSetPinDirection+0x1a4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	210f      	movs	r1, #15
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	43d2      	mvns	r2, r2
 8000942:	4611      	mov	r1, r2
 8000944:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <GPIO_voidSetPinDirection+0x1a4>)
 8000946:	400b      	ands	r3, r1
 8000948:	6013      	str	r3, [r2, #0]
						GPIOB_CRH |= ((copy_u8Mode) << ((copy_u8PIN) * 4)); //write mode  FOR ANYPIN
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <GPIO_voidSetPinDirection+0x1a4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	7979      	ldrb	r1, [r7, #5]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	4611      	mov	r1, r2
 800095a:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <GPIO_voidSetPinDirection+0x1a4>)
 800095c:	430b      	orrs	r3, r1
 800095e:	6013      	str	r3, [r2, #0]
						break;
 8000960:	e03c      	b.n	80009dc <GPIO_voidSetPinDirection+0x188>
						if (copy_u8PIN <= 7)
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	2b07      	cmp	r3, #7
 8000966:	d817      	bhi.n	8000998 <GPIO_voidSetPinDirection+0x144>
						GPIOC_CRL &=~((0b1111)      << (copy_u8PIN * 4));//reset GPIO_CRL FOR ANYPIN
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <GPIO_voidSetPinDirection+0x1a8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	79ba      	ldrb	r2, [r7, #6]
 800096e:	0092      	lsls	r2, r2, #2
 8000970:	210f      	movs	r1, #15
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	43d2      	mvns	r2, r2
 8000978:	4611      	mov	r1, r2
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <GPIO_voidSetPinDirection+0x1a8>)
 800097c:	400b      	ands	r3, r1
 800097e:	6013      	str	r3, [r2, #0]
						GPIOC_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <GPIO_voidSetPinDirection+0x1a8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	7979      	ldrb	r1, [r7, #5]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	4611      	mov	r1, r2
 8000990:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <GPIO_voidSetPinDirection+0x1a8>)
 8000992:	430b      	orrs	r3, r1
 8000994:	6013      	str	r3, [r2, #0]
						break;
 8000996:	e023      	b.n	80009e0 <GPIO_voidSetPinDirection+0x18c>
						else if (copy_u8PIN <= 15)
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b0f      	cmp	r3, #15
 800099c:	d820      	bhi.n	80009e0 <GPIO_voidSetPinDirection+0x18c>
						copy_u8PIN = copy_u8PIN -8;
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	3b08      	subs	r3, #8
 80009a2:	71bb      	strb	r3, [r7, #6]
                        GPIOC_CRH &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <GPIO_voidSetPinDirection+0x1ac>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	79ba      	ldrb	r2, [r7, #6]
 80009aa:	0092      	lsls	r2, r2, #2
 80009ac:	210f      	movs	r1, #15
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	43d2      	mvns	r2, r2
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <GPIO_voidSetPinDirection+0x1ac>)
 80009b8:	400b      	ands	r3, r1
 80009ba:	6013      	str	r3, [r2, #0]
						GPIOC_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <GPIO_voidSetPinDirection+0x1ac>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	7979      	ldrb	r1, [r7, #5]
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <GPIO_voidSetPinDirection+0x1ac>)
 80009ce:	430b      	orrs	r3, r1
 80009d0:	6013      	str	r3, [r2, #0]
						break;
 80009d2:	e005      	b.n	80009e0 <GPIO_voidSetPinDirection+0x18c>
			default :break;
 80009d4:	bf00      	nop
 80009d6:	e004      	b.n	80009e2 <GPIO_voidSetPinDirection+0x18e>
						break;
 80009d8:	bf00      	nop
 80009da:	e002      	b.n	80009e2 <GPIO_voidSetPinDirection+0x18e>
						break;
 80009dc:	bf00      	nop
 80009de:	e000      	b.n	80009e2 <GPIO_voidSetPinDirection+0x18e>
						break;
 80009e0:	bf00      	nop
			
			}
			
		
	}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010804 	.word	0x40010804
 80009f4:	40010c00 	.word	0x40010c00
 80009f8:	40010c04 	.word	0x40010c04
 80009fc:	40011000 	.word	0x40011000
 8000a00:	40011004 	.word	0x40011004

08000a04 <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue( u8 copy_u8PORT, u8 copy_u8PIN , u8 copy_u8Value)
	{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	71bb      	strb	r3, [r7, #6]
 8000a12:	4613      	mov	r3, r2
 8000a14:	717b      	strb	r3, [r7, #5]
	switch (copy_u8PORT)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d02a      	beq.n	8000a72 <GPIO_voidSetPinValue+0x6e>
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	dc3a      	bgt.n	8000a96 <GPIO_voidSetPinValue+0x92>
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <GPIO_voidSetPinValue+0x26>
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d012      	beq.n	8000a4e <GPIO_voidSetPinValue+0x4a>
							//CLR_BIT(GPIOC_ODR ,copy_u8PIN);
							GPIOC_BRR = (1<<copy_u8PIN);
						}
						break;							
			
			default :break;
 8000a28:	e035      	b.n	8000a96 <GPIO_voidSetPinValue+0x92>
						if (copy_u8Value == GPIO_HIGH)
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d105      	bne.n	8000a3c <GPIO_voidSetPinValue+0x38>
							GPIOA_BSR = (1<<copy_u8PIN);
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	2201      	movs	r2, #1
 8000a34:	409a      	lsls	r2, r3
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <GPIO_voidSetPinValue+0xac>)
 8000a38:	601a      	str	r2, [r3, #0]
						break;
 8000a3a:	e02e      	b.n	8000a9a <GPIO_voidSetPinValue+0x96>
						else if (copy_u8Value == GPIO_LOW)
 8000a3c:	797b      	ldrb	r3, [r7, #5]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d12b      	bne.n	8000a9a <GPIO_voidSetPinValue+0x96>
							GPIOA_BRR = (1<<copy_u8PIN);
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	2201      	movs	r2, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <GPIO_voidSetPinValue+0xb0>)
 8000a4a:	601a      	str	r2, [r3, #0]
						break;
 8000a4c:	e025      	b.n	8000a9a <GPIO_voidSetPinValue+0x96>
						if (copy_u8Value == GPIO_HIGH)
 8000a4e:	797b      	ldrb	r3, [r7, #5]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d105      	bne.n	8000a60 <GPIO_voidSetPinValue+0x5c>
							GPIOB_BSR = (1<<copy_u8PIN);
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	2201      	movs	r2, #1
 8000a58:	409a      	lsls	r2, r3
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <GPIO_voidSetPinValue+0xb4>)
 8000a5c:	601a      	str	r2, [r3, #0]
						break;	
 8000a5e:	e01e      	b.n	8000a9e <GPIO_voidSetPinValue+0x9a>
						else if (copy_u8Value == GPIO_LOW)
 8000a60:	797b      	ldrb	r3, [r7, #5]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d11b      	bne.n	8000a9e <GPIO_voidSetPinValue+0x9a>
							GPIOB_BRR = (1<<copy_u8PIN);
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <GPIO_voidSetPinValue+0xb8>)
 8000a6e:	601a      	str	r2, [r3, #0]
						break;	
 8000a70:	e015      	b.n	8000a9e <GPIO_voidSetPinValue+0x9a>
						if (copy_u8Value == GPIO_HIGH)
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <GPIO_voidSetPinValue+0x80>
							GPIOC_BSR = (1<<copy_u8PIN);
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <GPIO_voidSetPinValue+0xbc>)
 8000a80:	601a      	str	r2, [r3, #0]
						break;							
 8000a82:	e00e      	b.n	8000aa2 <GPIO_voidSetPinValue+0x9e>
						else if (copy_u8Value == GPIO_LOW)
 8000a84:	797b      	ldrb	r3, [r7, #5]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10b      	bne.n	8000aa2 <GPIO_voidSetPinValue+0x9e>
							GPIOC_BRR = (1<<copy_u8PIN);
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <GPIO_voidSetPinValue+0xc0>)
 8000a92:	601a      	str	r2, [r3, #0]
						break;							
 8000a94:	e005      	b.n	8000aa2 <GPIO_voidSetPinValue+0x9e>
			default :break;
 8000a96:	bf00      	nop
 8000a98:	e004      	b.n	8000aa4 <GPIO_voidSetPinValue+0xa0>
						break;
 8000a9a:	bf00      	nop
 8000a9c:	e002      	b.n	8000aa4 <GPIO_voidSetPinValue+0xa0>
						break;	
 8000a9e:	bf00      	nop
 8000aa0:	e000      	b.n	8000aa4 <GPIO_voidSetPinValue+0xa0>
						break;							
 8000aa2:	bf00      	nop
			}
			
	
	}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40010810 	.word	0x40010810
 8000ab4:	40010814 	.word	0x40010814
 8000ab8:	40010c10 	.word	0x40010c10
 8000abc:	40010c14 	.word	0x40010c14
 8000ac0:	40011010 	.word	0x40011010
 8000ac4:	40011014 	.word	0x40011014

08000ac8 <NVIC_Init>:


#include "NVIC_interface.h"

void NVIC_Init()
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

	SCB_AIRCR = (NVIC_PRIORITY_DISTRIBUTION<<8) | (0x05FA0000);
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <NVIC_Init+0x14>)
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <NVIC_Init+0x18>)
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed0c 	.word	0xe000ed0c
 8000ae0:	05fa0300 	.word	0x05fa0300

08000ae4 <NVIC_EnableInterrupt>:

void NVIC_EnableInterrupt(u8 int_Id) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
    NVIC->ISER[int_Id / 32] = (1 << (int_Id % 32));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	2201      	movs	r2, #1
 8000af6:	fa02 f103 	lsl.w	r1, r2, r3
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <NVIC_EnableInterrupt+0x2c>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <NVIC_SetPriority>:

u8 NVIC_GetActiveFlag(u8 int_Id) {
    return (NVIC->IABR[int_Id / 32] & (1 << (int_Id % 32))) ? 1 : 0;
}

void NVIC_SetPriority(u8 int_Id, u8 group_priority, u8 subgroup_priority) {
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	71bb      	strb	r3, [r7, #6]
 8000b22:	4613      	mov	r3, r2
 8000b24:	717b      	strb	r3, [r7, #5]

	if( NVIC_PRIORITY_DISTRIBUTION <= 7)
		if (group_priority > ((1 << (NVIC_PRIORITY_DISTRIBUTION - 7))-1) || subgroup_priority > ( (1 << (NVIC_PRIORITY_DISTRIBUTION - 3))-1))
 8000b26:	79ba      	ldrb	r2, [r7, #6]
 8000b28:	f06f 0303 	mvn.w	r3, #3
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	429a      	cmp	r2, r3
 8000b34:	da1d      	bge.n	8000b72 <NVIC_SetPriority+0x5e>
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11a      	bne.n	8000b72 <NVIC_SetPriority+0x5e>
		{
			return;
		}

    u8 priority = (group_priority <<( NVIC_PRIORITY_DISTRIBUTION-3)) | subgroup_priority;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	797b      	ldrb	r3, [r7, #5]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	73fb      	strb	r3, [r7, #15]

    NVIC->IPR[int_Id] = (NVIC->IPR[int_Id] & 0x0F) | (priority << 4);
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <NVIC_SetPriority+0x68>)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4413      	add	r3, r2
 8000b4a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	b25a      	sxtb	r2, r3
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b259      	sxtb	r1, r3
 8000b62:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <NVIC_SetPriority+0x68>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	b2c9      	uxtb	r1, r1
 8000b68:	4413      	add	r3, r2
 8000b6a:	460a      	mov	r2, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000b70:	e000      	b.n	8000b74 <NVIC_SetPriority+0x60>
			return;
 8000b72:	bf00      	nop
}
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <RCC_voidInitSysClock>:

#include "RCC_interface.h"  


void RCC_voidInitSysClock()
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0


	    // 1. Enable HSI if selected
	#if CLOCK_TYPE == RCC_HSI
	    RCC_CR |= (1 << RCC_CR_HSION);  // Enable HSI
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <RCC_voidInitSysClock+0x2c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a08      	ldr	r2, [pc, #32]	; (8000bac <RCC_voidInitSysClock+0x2c>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]
	    // Enable PLL
	    RCC_CR |= (1 << RCC_CR_PLLON);  // Enable PLL
	#endif

	    // 4. Set the main system clock source
	    RCC_CFGR &= ~(0x3 << RCC_CFGR_SW);  // Clear previous values
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <RCC_voidInitSysClock+0x30>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <RCC_voidInitSysClock+0x30>)
 8000b96:	f023 0303 	bic.w	r3, r3, #3
 8000b9a:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= (CLOCK_TYPE << RCC_CFGR_SW);  // Set main clock source
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <RCC_voidInitSysClock+0x30>)
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <RCC_voidInitSysClock+0x30>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40021004 	.word	0x40021004

08000bb4 <RCC_voidEnableClock>:



void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusId)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d01c      	beq.n	8000c04 <RCC_voidEnableClock+0x50>
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	dc25      	bgt.n	8000c1a <RCC_voidEnableClock+0x66>
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <RCC_voidEnableClock+0x24>
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d00b      	beq.n	8000bee <RCC_voidEnableClock+0x3a>
        case RCC_APB2:
            RCC_APB2ENR |= (1 << Copy_u8PerId);
            break;

    }
}
 8000bd6:	e020      	b.n	8000c1a <RCC_voidEnableClock+0x66>
            RCC_AHBENR |= (1 << Copy_u8PerId);
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <RCC_voidEnableClock+0x70>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	79ba      	ldrb	r2, [r7, #6]
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	4611      	mov	r1, r2
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <RCC_voidEnableClock+0x70>)
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6013      	str	r3, [r2, #0]
            break;
 8000bec:	e015      	b.n	8000c1a <RCC_voidEnableClock+0x66>
            RCC_APB1ENR |= (1 << Copy_u8PerId);
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <RCC_voidEnableClock+0x74>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	79ba      	ldrb	r2, [r7, #6]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <RCC_voidEnableClock+0x74>)
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	6013      	str	r3, [r2, #0]
            break;
 8000c02:	e00a      	b.n	8000c1a <RCC_voidEnableClock+0x66>
            RCC_APB2ENR |= (1 << Copy_u8PerId);
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <RCC_voidEnableClock+0x78>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	4611      	mov	r1, r2
 8000c12:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <RCC_voidEnableClock+0x78>)
 8000c14:	430b      	orrs	r3, r1
 8000c16:	6013      	str	r3, [r2, #0]
            break;
 8000c18:	bf00      	nop
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021014 	.word	0x40021014
 8000c28:	4002101c 	.word	0x4002101c
 8000c2c:	40021018 	.word	0x40021018

08000c30 <SPI_Init>:


#include "SPI_interface.h"
#include "GPIO_interface.h"

void SPI_Init(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
   #if (SPI_MODE == SPI_MODE_MASTER)
        SPI1->CR1 |= (1 << SPI_CR1_MSTR); // MASTER mode
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <SPI_Init+0x68>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <SPI_Init+0x68>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6013      	str	r3, [r2, #0]

    	GPIO_voidSetPinDirection(SS1_PIN  ,OUTPUT_SPEED_10MHZ_PP);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2104      	movs	r1, #4
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fe05 	bl	8000854 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_MOSI ,OUTPUT_SPEED_10MHZ_AFPP);
 8000c4a:	2209      	movs	r2, #9
 8000c4c:	2107      	movs	r1, #7
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe00 	bl	8000854 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_MISO ,INPUT_FLOUTING);
 8000c54:	2204      	movs	r2, #4
 8000c56:	2106      	movs	r1, #6
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fdfb 	bl	8000854 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_SCK  ,OUTPUT_SPEED_10MHZ_AFPP);
 8000c5e:	2209      	movs	r2, #9
 8000c60:	2105      	movs	r1, #5
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fdf6 	bl	8000854 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_MISO ,OUTPUT_SPEED_10MHZ_AFPP);
    	GPIO_voidSetPinDirection(SPI_SCK  ,INPUT_FLOUTING);

	#endif

    SPI1->CR1 |= (SPI_CLOCK_PHASE    << SPI_CR1_CPHA);
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <SPI_Init+0x68>)
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <SPI_Init+0x68>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (SPI_CLOCK_POLARITY << SPI_CR1_CPOL);
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <SPI_Init+0x68>)
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <SPI_Init+0x68>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (SPI_SSM            << SPI_CR1_SSI);
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <SPI_Init+0x68>)
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <SPI_Init+0x68>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (SPI_SSM            << SPI_CR1_SSM);
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SPI_Init+0x68>)
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SPI_Init+0x68>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6013      	str	r3, [r2, #0]

    SPI1->CR1 |= (1 << SPI_CR1_SPE);
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <SPI_Init+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a02      	ldr	r2, [pc, #8]	; (8000c98 <SPI_Init+0x68>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40013000 	.word	0x40013000

08000c9c <SPI_Send>:

void SPI_Send(u8 data) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]

	while (!(SPI1->SR & (1 << SPI_SR_TXE)));
 8000ca6:	bf00      	nop
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SPI_Send+0x28>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <SPI_Send+0xc>

	SPI1->DR = data;
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <SPI_Send+0x28>)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	60d3      	str	r3, [r2, #12]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <STK_delay>:
}




void STK_delay(u32 time, u32 unit) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]

	f32 ratio = STK_TIMER_FREQ / unit;  //TICKS = ( TIME IN SEC/ UNIT) * TIMER FREQ.
 8000cd2:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <STK_delay+0x70>)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fafe 	bl	80002dc <__aeabi_ui2f>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60fb      	str	r3, [r7, #12]
	u32 ticks = time * ratio;
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff faf9 	bl	80002dc <__aeabi_ui2f>
 8000cea:	4603      	mov	r3, r0
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fb4c 	bl	800038c <__aeabi_fmul>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc98 	bl	800062c <__aeabi_f2uiz>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60bb      	str	r3, [r7, #8]


    STK->LOAD = ticks & STK_LOAD_MASK;
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <STK_delay+0x74>)
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d08:	6053      	str	r3, [r2, #4]



    STK->CTRL |= (1 << STK_CTRL_ENABLE); //start timer
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <STK_delay+0x74>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <STK_delay+0x74>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6013      	str	r3, [r2, #0]

    while (!(STK->CTRL & (1 << STK_CTRL_COUNTFLAG)));  //waiting flag
 8000d16:	bf00      	nop
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <STK_delay+0x74>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f9      	beq.n	8000d18 <STK_delay+0x50>

    STK->CTRL &= ~(1 << STK_CTRL_ENABLE);  //stop timer
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <STK_delay+0x74>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <STK_delay+0x74>)
 8000d2a:	f023 0301 	bic.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	000f4240 	.word	0x000f4240
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <SysTick_Handler>:

    return time;
}


void SysTick_Handler(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

    STK_CallBack();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <SysTick_Handler+0x30>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4798      	blx	r3


    volatile u32 temp = STK->CTRL; //flag clear
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <SysTick_Handler+0x34>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	607b      	str	r3, [r7, #4]

    if (STK_u8ModeOfInterval == STK_ONEC) {
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <SysTick_Handler+0x38>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d105      	bne.n	8000d66 <SysTick_Handler+0x26>
        STK->CTRL &= ~(1 << STK_CTRL_ENABLE);
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SysTick_Handler+0x34>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SysTick_Handler+0x34>)
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	6013      	str	r3, [r2, #0]
    }
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000045c 	.word	0x2000045c
 8000d74:	e000e010 	.word	0xe000e010
 8000d78:	20000460 	.word	0x20000460

08000d7c <initializeSnake>:

u8 GridFlags[(HEIGHT + 1)][(WIDTH + 1)] = {Empty};

// Initialize snake position, tail length, and initial food position
void initializeSnake(int headX, int headY, int tailLength)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
    head.x = headX;
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <initializeSnake+0x5c>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6013      	str	r3, [r2, #0]
    head.y = headY;
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <initializeSnake+0x5c>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	6053      	str	r3, [r2, #4]
    tail.length = tailLength;
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <initializeSnake+0x60>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6513      	str	r3, [r2, #80]	; 0x50
    for (int i = 0; i < tail.length; i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e010      	b.n	8000dc2 <initializeSnake+0x46>
    {
        tail.x[i] = headX - (i + 1);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <initializeSnake+0x60>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        tail.y[i] = headY;
 8000db0:	490a      	ldr	r1, [pc, #40]	; (8000ddc <initializeSnake+0x60>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	330a      	adds	r3, #10
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < tail.length; i++)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <initializeSnake+0x60>)
 8000dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbe9      	blt.n	8000da0 <initializeSnake+0x24>
    }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000464 	.word	0x20000464
 8000ddc:	2000046c 	.word	0x2000046c

08000de0 <initializeFood>:

// Initialize food position and direction
void initializeFood(int foodX, int foodY, dir_t foodDirection)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4613      	mov	r3, r2
 8000dec:	71fb      	strb	r3, [r7, #7]
    food.x = foodX;
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <initializeFood+0x2c>)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6013      	str	r3, [r2, #0]
    food.y = foodY;
 8000df4:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <initializeFood+0x2c>)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	6053      	str	r3, [r2, #4]
    food.moveDir = foodDirection;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <initializeFood+0x2c>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	7213      	strb	r3, [r2, #8]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200004c0 	.word	0x200004c0

08000e10 <moveFood>:

// Move food in a fixed direction when eaten
void moveFood()
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
    switch (food.moveDir)
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <moveFood+0x9c>)
 8000e16:	7a1b      	ldrb	r3, [r3, #8]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d822      	bhi.n	8000e64 <moveFood+0x54>
 8000e1e:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <moveFood+0x14>)
 8000e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e24:	08000e41 	.word	0x08000e41
 8000e28:	08000e35 	.word	0x08000e35
 8000e2c:	08000e4d 	.word	0x08000e4d
 8000e30:	08000e59 	.word	0x08000e59
    {
    case RIGHT:
        food.x++;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <moveFood+0x9c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <moveFood+0x9c>)
 8000e3c:	6013      	str	r3, [r2, #0]
        break;
 8000e3e:	e012      	b.n	8000e66 <moveFood+0x56>
    case LEFT:
        food.x--;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <moveFood+0x9c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <moveFood+0x9c>)
 8000e48:	6013      	str	r3, [r2, #0]
        break;
 8000e4a:	e00c      	b.n	8000e66 <moveFood+0x56>
    case UP:
        food.y--;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <moveFood+0x9c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <moveFood+0x9c>)
 8000e54:	6053      	str	r3, [r2, #4]
        break;
 8000e56:	e006      	b.n	8000e66 <moveFood+0x56>
    case DOWN:
        food.y++;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <moveFood+0x9c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a13      	ldr	r2, [pc, #76]	; (8000eac <moveFood+0x9c>)
 8000e60:	6053      	str	r3, [r2, #4]
        break;
 8000e62:	e000      	b.n	8000e66 <moveFood+0x56>
    default:
        break;
 8000e64:	bf00      	nop
    }

    // Wrap food position around boundaries
    if (food.x >= WIDTH)
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <moveFood+0x9c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	dd03      	ble.n	8000e76 <moveFood+0x66>
        food.x = 0;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <moveFood+0x9c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e006      	b.n	8000e84 <moveFood+0x74>
    else if (food.x < 0)
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <moveFood+0x9c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da02      	bge.n	8000e84 <moveFood+0x74>
        food.x = WIDTH - 1;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <moveFood+0x9c>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
    if (food.y >= HEIGHT)
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <moveFood+0x9c>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	dd03      	ble.n	8000e94 <moveFood+0x84>
        food.y = 0;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <moveFood+0x9c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
    else if (food.y < 0)
        food.y = HEIGHT - 1;
}
 8000e92:	e006      	b.n	8000ea2 <moveFood+0x92>
    else if (food.y < 0)
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <moveFood+0x9c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da02      	bge.n	8000ea2 <moveFood+0x92>
        food.y = HEIGHT - 1;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <moveFood+0x9c>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	605a      	str	r2, [r3, #4]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200004c0 	.word	0x200004c0

08000eb0 <moveSnake>:

// Move snake in specified direction and update tail
void moveSnake(dir_t direction)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
    int prevX = head.x;
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <moveSnake+0x128>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61fb      	str	r3, [r7, #28]
    int prevY = head.y;
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <moveSnake+0x128>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	61bb      	str	r3, [r7, #24]

    // Update head position based on direction
    switch (direction)
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d822      	bhi.n	8000f14 <moveSnake+0x64>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <moveSnake+0x24>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000efd 	.word	0x08000efd
 8000ee0:	08000f09 	.word	0x08000f09
    {
    case LEFT:
        head.x--;
 8000ee4:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <moveSnake+0x128>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	4a3b      	ldr	r2, [pc, #236]	; (8000fd8 <moveSnake+0x128>)
 8000eec:	6013      	str	r3, [r2, #0]
        break;
 8000eee:	e012      	b.n	8000f16 <moveSnake+0x66>
    case RIGHT:
        head.x++;
 8000ef0:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <moveSnake+0x128>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <moveSnake+0x128>)
 8000ef8:	6013      	str	r3, [r2, #0]
        break;
 8000efa:	e00c      	b.n	8000f16 <moveSnake+0x66>
    case UP:
        head.y--;
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <moveSnake+0x128>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4a35      	ldr	r2, [pc, #212]	; (8000fd8 <moveSnake+0x128>)
 8000f04:	6053      	str	r3, [r2, #4]
        break;
 8000f06:	e006      	b.n	8000f16 <moveSnake+0x66>
    case DOWN:
        head.y++;
 8000f08:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <moveSnake+0x128>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <moveSnake+0x128>)
 8000f10:	6053      	str	r3, [r2, #4]
        break;
 8000f12:	e000      	b.n	8000f16 <moveSnake+0x66>
    default:
        break;
 8000f14:	bf00      	nop
    }

    // Update tail positions
    int prev2X, prev2Y;
    for (int i = 0; i < tail.length; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e01c      	b.n	8000f56 <moveSnake+0xa6>
    {
        prev2X = tail.x[i];
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <moveSnake+0x12c>)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        prev2Y = tail.y[i];
 8000f26:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <moveSnake+0x12c>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	330a      	adds	r3, #10
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	60fb      	str	r3, [r7, #12]
        tail.x[i] = prevX;
 8000f32:	492a      	ldr	r1, [pc, #168]	; (8000fdc <moveSnake+0x12c>)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        tail.y[i] = prevY;
 8000f3c:	4927      	ldr	r1, [pc, #156]	; (8000fdc <moveSnake+0x12c>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	330a      	adds	r3, #10
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        prevX = prev2X;
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	61fb      	str	r3, [r7, #28]
        prevY = prev2Y;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < tail.length; i++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <moveSnake+0x12c>)
 8000f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbdd      	blt.n	8000f1c <moveSnake+0x6c>
    }

    // Boundary wrapping for snake
    if (head.x >= WIDTH)
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <moveSnake+0x128>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b07      	cmp	r3, #7
 8000f66:	dd03      	ble.n	8000f70 <moveSnake+0xc0>
        head.x = 0;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <moveSnake+0x128>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e006      	b.n	8000f7e <moveSnake+0xce>
    else if (head.x < 0)
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <moveSnake+0x128>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da02      	bge.n	8000f7e <moveSnake+0xce>
        head.x = WIDTH - 1;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <moveSnake+0x128>)
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	601a      	str	r2, [r3, #0]
    if (head.y >= HEIGHT)
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <moveSnake+0x128>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	dd03      	ble.n	8000f8e <moveSnake+0xde>
        head.y = 0;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <moveSnake+0x128>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	e006      	b.n	8000f9c <moveSnake+0xec>
    else if (head.y < 0)
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <moveSnake+0x128>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	da02      	bge.n	8000f9c <moveSnake+0xec>
        head.y = HEIGHT - 1;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <moveSnake+0x128>)
 8000f98:	2208      	movs	r2, #8
 8000f9a:	605a      	str	r2, [r3, #4]

    // Check if snake has eaten the food
    if (head.x == food.x && head.y == food.y)
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <moveSnake+0x128>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <moveSnake+0x130>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d112      	bne.n	8000fce <moveSnake+0x11e>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <moveSnake+0x128>)
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <moveSnake+0x130>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d10c      	bne.n	8000fce <moveSnake+0x11e>
    {
        tail.length++;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <moveSnake+0x12c>)
 8000fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <moveSnake+0x12c>)
 8000fbc:	6513      	str	r3, [r2, #80]	; 0x50
        moveFood(); // Move food to new position
 8000fbe:	f7ff ff27 	bl	8000e10 <moveFood>
        Score+= 10;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <moveSnake+0x134>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	330a      	adds	r3, #10
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <moveSnake+0x134>)
 8000fcc:	701a      	strb	r2, [r3, #0]
    }
}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000464 	.word	0x20000464
 8000fdc:	2000046c 	.word	0x2000046c
 8000fe0:	200004c0 	.word	0x200004c0
 8000fe4:	20000461 	.word	0x20000461

08000fe8 <draw>:

// Draw game board with snake's head, tail, and food, and generate row array
void draw()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
    for (int i = 1; i <= HEIGHT; i++)
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e0a5      	b.n	8001140 <draw+0x158>
    {
        for (int j = 1; j <= WIDTH; j++)
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e09b      	b.n	8001132 <draw+0x14a>
        {
            if (i == head.y && j == head.x)
 8000ffa:	4b56      	ldr	r3, [pc, #344]	; (8001154 <draw+0x16c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d119      	bne.n	8001038 <draw+0x50>
 8001004:	4b53      	ldr	r3, [pc, #332]	; (8001154 <draw+0x16c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	429a      	cmp	r2, r3
 800100c:	d114      	bne.n	8001038 <draw+0x50>
            {
                PoisionInTFT(head.x, head.y, TFT_BLUE); // Draw snake head
 800100e:	4b51      	ldr	r3, [pc, #324]	; (8001154 <draw+0x16c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <draw+0x16c>)
 8001016:	6852      	ldr	r2, [r2, #4]
 8001018:	b2d1      	uxtb	r1, r2
 800101a:	221f      	movs	r2, #31
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f8a1 	bl	8001164 <PoisionInTFT>
                GridFlags[i][j] = FilledWithColor;
 8001022:	494d      	ldr	r1, [pc, #308]	; (8001158 <draw+0x170>)
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	18ca      	adds	r2, r1, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	4413      	add	r3, r2
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e079      	b.n	800112c <draw+0x144>
            }
            else if (i == food.y && j == food.x)
 8001038:	4b48      	ldr	r3, [pc, #288]	; (800115c <draw+0x174>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	429a      	cmp	r2, r3
 8001040:	d11a      	bne.n	8001078 <draw+0x90>
 8001042:	4b46      	ldr	r3, [pc, #280]	; (800115c <draw+0x174>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	429a      	cmp	r2, r3
 800104a:	d115      	bne.n	8001078 <draw+0x90>
            {
                PoisionInTFT(food.x, food.y, TFT_GRAY);
 800104c:	4b43      	ldr	r3, [pc, #268]	; (800115c <draw+0x174>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4a42      	ldr	r2, [pc, #264]	; (800115c <draw+0x174>)
 8001054:	6852      	ldr	r2, [r2, #4]
 8001056:	b2d1      	uxtb	r1, r2
 8001058:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f881 	bl	8001164 <PoisionInTFT>
                GridFlags[i][j] = FilledWithColor;
 8001062:	493d      	ldr	r1, [pc, #244]	; (8001158 <draw+0x170>)
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	18ca      	adds	r2, r1, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4413      	add	r3, r2
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e059      	b.n	800112c <draw+0x144>
            }
            else
            {
                int isTail = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
                for (int k = 0; k < tail.length; k++)
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	e02e      	b.n	80010e0 <draw+0xf8>
                {
                    if (i == tail.y[k] && j == tail.x[k])
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <draw+0x178>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	330a      	adds	r3, #10
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	429a      	cmp	r2, r3
 8001090:	d123      	bne.n	80010da <draw+0xf2>
 8001092:	4a33      	ldr	r2, [pc, #204]	; (8001160 <draw+0x178>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	429a      	cmp	r2, r3
 800109e:	d11c      	bne.n	80010da <draw+0xf2>
                    {
                        PoisionInTFT(tail.x[k], tail.y[k], TFT_GREEN);
 80010a0:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <draw+0x178>)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	b2d8      	uxtb	r0, r3
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <draw+0x178>)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	330a      	adds	r3, #10
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80010ba:	4619      	mov	r1, r3
 80010bc:	f000 f852 	bl	8001164 <PoisionInTFT>
                        isTail = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
                        GridFlags[i][j] = FilledWithColor;
 80010c4:	4924      	ldr	r1, [pc, #144]	; (8001158 <draw+0x170>)
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	18ca      	adds	r2, r1, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4413      	add	r3, r2
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
                        break;
 80010d8:	e007      	b.n	80010ea <draw+0x102>
                for (int k = 0; k < tail.length; k++)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <draw+0x178>)
 80010e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dbcb      	blt.n	8001082 <draw+0x9a>
                    }
                }
                if ((!isTail) && (GridFlags[i][j] == FilledWithColor))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d11d      	bne.n	800112c <draw+0x144>
 80010f0:	4919      	ldr	r1, [pc, #100]	; (8001158 <draw+0x170>)
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4413      	add	r3, r2
 80010fa:	18ca      	adds	r2, r1, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d112      	bne.n	800112c <draw+0x144>
                {
                    PoisionInTFT(j, i, TFT_WHITE);
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	b2d1      	uxtb	r1, r2
 800110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f826 	bl	8001164 <PoisionInTFT>
                    GridFlags[i][j] = Empty;
 8001118:	490f      	ldr	r1, [pc, #60]	; (8001158 <draw+0x170>)
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	18ca      	adds	r2, r1, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
        for (int j = 1; j <= WIDTH; j++)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3301      	adds	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b08      	cmp	r3, #8
 8001136:	f77f af60 	ble.w	8000ffa <draw+0x12>
    for (int i = 1; i <= HEIGHT; i++)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b09      	cmp	r3, #9
 8001144:	f77f af56 	ble.w	8000ff4 <draw+0xc>
                }
            }
        }
    }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000464 	.word	0x20000464
 8001158:	200004cc 	.word	0x200004cc
 800115c:	200004c0 	.word	0x200004c0
 8001160:	2000046c 	.word	0x2000046c

08001164 <PoisionInTFT>:

void PoisionInTFT(u8 xpos, u8 ypos, u16 color)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	80bb      	strh	r3, [r7, #4]
    u8 x2 = xpos * Slected_Size;
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	73fb      	strb	r3, [r7, #15]
    u8 x1 = x2 - Slected_Size;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	3b10      	subs	r3, #16
 8001180:	73bb      	strb	r3, [r7, #14]
    u8 y2 = ypos * Slected_Size;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	737b      	strb	r3, [r7, #13]
    u8 y1 = y2 - Slected_Size;
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	3b10      	subs	r3, #16
 800118c:	733b      	strb	r3, [r7, #12]
    TFT_voidDrawRect(x1, x2, y1, y2, color);
 800118e:	7b7c      	ldrb	r4, [r7, #13]
 8001190:	7b3a      	ldrb	r2, [r7, #12]
 8001192:	7bf9      	ldrb	r1, [r7, #15]
 8001194:	7bb8      	ldrb	r0, [r7, #14]
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	4623      	mov	r3, r4
 800119c:	f000 f8c0 	bl	8001320 <TFT_voidDrawRect>
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd90      	pop	{r4, r7, pc}

080011a8 <MoveSnakeUp>:


void MoveSnakeUp()
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	dir = UP;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <MoveSnakeUp+0x14>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000462 	.word	0x20000462

080011c0 <MoveSnakeDown>:

void MoveSnakeDown()
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	dir = DOWN;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <MoveSnakeDown+0x14>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000462 	.word	0x20000462

080011d8 <MoveSnakeLeft>:

void MoveSnakeLeft()
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	dir = LEFT;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <MoveSnakeLeft+0x14>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000462 	.word	0x20000462

080011f0 <MoveSnakeRight>:

void MoveSnakeRight()
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	dir = RIGHT;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <MoveSnakeRight+0x14>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000462 	.word	0x20000462

08001208 <ControlEXT>:

void ControlEXT(u8 NVIC_NUMBER,void *callBackFun())
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
	GPIO_voidSetPinDirection(GPIOA,(NVIC_NUMBER - 6),OUTPUT_SPEED_10MHZ_PP);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3b06      	subs	r3, #6
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2201      	movs	r2, #1
 800121c:	4619      	mov	r1, r3
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fb18 	bl	8000854 <GPIO_voidSetPinDirection>
	NVIC_EnableInterrupt(NVIC_NUMBER); //EXTI0
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc5c 	bl	8000ae4 <NVIC_EnableInterrupt>
	NVIC_SetPriority(NVIC_NUMBER,(NVIC_NUMBER - 6),0);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	3b06      	subs	r3, #6
 8001230:	b2d9      	uxtb	r1, r3
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2200      	movs	r2, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fc6c 	bl	8000b14 <NVIC_SetPriority>
	EXTI_voidConfigure((NVIC_NUMBER - 6),PORTA,EXTI_RISING_EDGE,callBackFun);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	3b06      	subs	r3, #6
 8001240:	b2d8      	uxtb	r0, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	f7ff fa10 	bl	800066c <EXTI_voidConfigure>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <TFT_voidInit>:
};



void TFT_voidInit()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8001258:	f7ff fc92 	bl	8000b80 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2,RCC_GPIOA);
 800125c:	2102      	movs	r1, #2
 800125e:	2002      	movs	r0, #2
 8001260:	f7ff fca8 	bl	8000bb4 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,RCC_SPI1);
 8001264:	210c      	movs	r1, #12
 8001266:	2002      	movs	r0, #2
 8001268:	f7ff fca4 	bl	8000bb4 <RCC_voidEnableClock>

	GPIO_voidSetPinDirection(TFT_CMD_DATA_PIN,OUTPUT_SPEED_2MHZ_PP);    /*TFT CMD_DATA*/
 800126c:	2202      	movs	r2, #2
 800126e:	210b      	movs	r1, #11
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff faef 	bl	8000854 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(TFT_RST_PIN,OUTPUT_SPEED_2MHZ_PP);    /*TFT RST*/
 8001276:	2202      	movs	r2, #2
 8001278:	210a      	movs	r1, #10
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff faea 	bl	8000854 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA,PIN5,OUTPUT_SPEED_10MHZ_AFPP); /*TFT CLK*/
 8001280:	2209      	movs	r2, #9
 8001282:	2105      	movs	r1, #5
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fae5 	bl	8000854 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA,PIN7,OUTPUT_SPEED_10MHZ_AFPP); /*TFT MOSI*/
 800128a:	2209      	movs	r2, #9
 800128c:	2107      	movs	r1, #7
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fae0 	bl	8000854 <GPIO_voidSetPinDirection>
	SPI_Init();
 8001294:	f7ff fccc 	bl	8000c30 <SPI_Init>
	/*Reset Pulse*/
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 8001298:	2201      	movs	r2, #1
 800129a:	210a      	movs	r1, #10
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fbb1 	bl	8000a04 <GPIO_voidSetPinValue>
	STK_delay(100,US_UNIT);
 80012a2:	491e      	ldr	r1, [pc, #120]	; (800131c <TFT_voidInit+0xc8>)
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f7ff fd0f 	bl	8000cc8 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_LOW);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210a      	movs	r1, #10
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fba8 	bl	8000a04 <GPIO_voidSetPinValue>
	STK_delay(1,US_UNIT);
 80012b4:	4919      	ldr	r1, [pc, #100]	; (800131c <TFT_voidInit+0xc8>)
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff fd06 	bl	8000cc8 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 80012bc:	2201      	movs	r2, #1
 80012be:	210a      	movs	r1, #10
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fb9f 	bl	8000a04 <GPIO_voidSetPinValue>
	STK_delay(100,US_UNIT);
 80012c6:	4915      	ldr	r1, [pc, #84]	; (800131c <TFT_voidInit+0xc8>)
 80012c8:	2064      	movs	r0, #100	; 0x64
 80012ca:	f7ff fcfd 	bl	8000cc8 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_LOW);
 80012ce:	2200      	movs	r2, #0
 80012d0:	210a      	movs	r1, #10
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fb96 	bl	8000a04 <GPIO_voidSetPinValue>
	STK_delay(100,US_UNIT);
 80012d8:	4910      	ldr	r1, [pc, #64]	; (800131c <TFT_voidInit+0xc8>)
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f7ff fcf4 	bl	8000cc8 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 80012e0:	2201      	movs	r2, #1
 80012e2:	210a      	movs	r1, #10
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fb8d 	bl	8000a04 <GPIO_voidSetPinValue>
	STK_delay(120,MS_UNIT);
 80012ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ee:	2078      	movs	r0, #120	; 0x78
 80012f0:	f7ff fcea 	bl	8000cc8 <STK_delay>

	/*sleep out command*/
	voidWriteCommand(TFT_SLEEP_OUT_CMD);
 80012f4:	2011      	movs	r0, #17
 80012f6:	f000 f921 	bl	800153c <voidWriteCommand>
	STK_delay(150,MS_UNIT);
 80012fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012fe:	2096      	movs	r0, #150	; 0x96
 8001300:	f7ff fce2 	bl	8000cc8 <STK_delay>

	/*color mode command*/
	voidWriteCommand(TFT_COLOR_MODE_CMD);
 8001304:	203a      	movs	r0, #58	; 0x3a
 8001306:	f000 f919 	bl	800153c <voidWriteCommand>
	voidWriteData(TFT_RGB_565);
 800130a:	2005      	movs	r0, #5
 800130c:	f000 f928 	bl	8001560 <voidWriteData>

	/*Display On command*/
	voidWriteCommand(TFT_DISPLAY_ON_CMD);
 8001310:	2029      	movs	r0, #41	; 0x29
 8001312:	f000 f913 	bl	800153c <voidWriteCommand>

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	000f4240 	.word	0x000f4240

08001320 <TFT_voidDrawRect>:
			voidWriteData(Data);
		}
}

void TFT_voidDrawRect( u8 x1, u8 x2 , u8 y1 , u8 y2, u16 Color)
	{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4623      	mov	r3, r4
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	4603      	mov	r3, r0
 8001334:	71bb      	strb	r3, [r7, #6]
 8001336:	460b      	mov	r3, r1
 8001338:	717b      	strb	r3, [r7, #5]
 800133a:	4613      	mov	r3, r2
 800133c:	713b      	strb	r3, [r7, #4]
		u16 counter;
		u8 Data;
		u16 size = (x2-x1)*(y2-y1);
 800133e:	79ba      	ldrb	r2, [r7, #6]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	7939      	ldrb	r1, [r7, #4]
 8001348:	797a      	ldrb	r2, [r7, #5]
 800134a:	1a8a      	subs	r2, r1, r2
 800134c:	b292      	uxth	r2, r2
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	81bb      	strh	r3, [r7, #12]

		/*Set X address*/
		voidWriteCommand(TFT_SET_X_ADDR_CMD);
 8001354:	202a      	movs	r0, #42	; 0x2a
 8001356:	f000 f8f1 	bl	800153c <voidWriteCommand>
		/*Start*/
		voidWriteData(0); //high "position send as 2 bytes"
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f900 	bl	8001560 <voidWriteData>
		voidWriteData(x1);//low
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f8fc 	bl	8001560 <voidWriteData>
		/*End*/
		voidWriteData(0);
 8001368:	2000      	movs	r0, #0
 800136a:	f000 f8f9 	bl	8001560 <voidWriteData>
		voidWriteData(x2-1);
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	3b01      	subs	r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f8f3 	bl	8001560 <voidWriteData>

		/*Set Y address*/
		voidWriteCommand(TFT_SET_Y_ADDR_CMD);
 800137a:	202b      	movs	r0, #43	; 0x2b
 800137c:	f000 f8de 	bl	800153c <voidWriteCommand>
		/*Start*/
		voidWriteData(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f8ed 	bl	8001560 <voidWriteData>
		voidWriteData(y1);
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f8e9 	bl	8001560 <voidWriteData>
		/*End*/
		voidWriteData(0);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f8e6 	bl	8001560 <voidWriteData>
		voidWriteData(y2-1);
 8001394:	793b      	ldrb	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f8e0 	bl	8001560 <voidWriteData>


		/*RAM writ*/
		voidWriteCommand(TFT_RAM_WRITE_CMD);
 80013a0:	202c      	movs	r0, #44	; 0x2c
 80013a2:	f000 f8cb 	bl	800153c <voidWriteCommand>

		for (counter= 0; counter < size; counter ++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	81fb      	strh	r3, [r7, #14]
 80013aa:	e010      	b.n	80013ce <TFT_voidDrawRect+0xae>
		{
			Data = Color >> 8;
 80013ac:	8c3b      	ldrh	r3, [r7, #32]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	72fb      	strb	r3, [r7, #11]

			/* Write the high byte */
			voidWriteData(Data);
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f8d2 	bl	8001560 <voidWriteData>
			/* Write the low byte */
			Data = Color& 0xff;
 80013bc:	8c3b      	ldrh	r3, [r7, #32]
 80013be:	72fb      	strb	r3, [r7, #11]
			voidWriteData(Data);
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f8cc 	bl	8001560 <voidWriteData>
		for (counter= 0; counter < size; counter ++)
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	3301      	adds	r3, #1
 80013cc:	81fb      	strh	r3, [r7, #14]
 80013ce:	89fa      	ldrh	r2, [r7, #14]
 80013d0:	89bb      	ldrh	r3, [r7, #12]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3ea      	bcc.n	80013ac <TFT_voidDrawRect+0x8c>
		}
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}

080013e0 <TFT_voidDrawLetter>:
		}
}


void TFT_voidDrawLetter( u8 xpos, u8 ypos,const u8 *letter , u16 Color)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	603a      	str	r2, [r7, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	460b      	mov	r3, r1
 80013f0:	71bb      	strb	r3, [r7, #6]
 80013f2:	4613      	mov	r3, r2
 80013f4:	80bb      	strh	r3, [r7, #4]
	u8 Data;

//	u8 size = 40;

	/*Set X address*/
	voidWriteCommand(TFT_SET_X_ADDR_CMD);
 80013f6:	202a      	movs	r0, #42	; 0x2a
 80013f8:	f000 f8a0 	bl	800153c <voidWriteCommand>
	/*Start*/
	voidWriteData(0); //high
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 f8af 	bl	8001560 <voidWriteData>
	voidWriteData(xpos);//low
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f8ab 	bl	8001560 <voidWriteData>
	/*End*/
	voidWriteData(0);
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f8a8 	bl	8001560 <voidWriteData>
	voidWriteData(xpos+7);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	3307      	adds	r3, #7
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f8a2 	bl	8001560 <voidWriteData>

	/*Set Y address*/
	voidWriteCommand(TFT_SET_Y_ADDR_CMD);
 800141c:	202b      	movs	r0, #43	; 0x2b
 800141e:	f000 f88d 	bl	800153c <voidWriteCommand>
	/*Start*/
	voidWriteData(0);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f89c 	bl	8001560 <voidWriteData>
	voidWriteData(ypos);
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f898 	bl	8001560 <voidWriteData>
	/*End*/
	voidWriteData(0);
 8001430:	2000      	movs	r0, #0
 8001432:	f000 f895 	bl	8001560 <voidWriteData>
	voidWriteData(ypos+7);
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	3307      	adds	r3, #7
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f88f 	bl	8001560 <voidWriteData>


	/*RAM writ*/
	voidWriteCommand(TFT_RAM_WRITE_CMD);
 8001442:	202c      	movs	r0, #44	; 0x2c
 8001444:	f000 f87a 	bl	800153c <voidWriteCommand>
		{
			for (s8 x = 7 ; x>=0; x--)
			{
#endif
#ifdef 	ST7735R
		for (s8 y =0 ; y<=7; y++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e03b      	b.n	80014c6 <TFT_voidDrawLetter+0xe6>
		{
			for (s8 x = 0 ; x<=7; x++)
 800144e:	2300      	movs	r3, #0
 8001450:	73bb      	strb	r3, [r7, #14]
 8001452:	e02e      	b.n	80014b2 <TFT_voidDrawLetter+0xd2>
			{
#endif

				if ((GET_BIT(letter[y],x))==0)
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001464:	fa42 f303 	asr.w	r3, r2, r3
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10c      	bne.n	800148a <TFT_voidDrawLetter+0xaa>
				{
					Data = TFT_WIGHT >> 8;
 8001470:	23ff      	movs	r3, #255	; 0xff
 8001472:	737b      	strb	r3, [r7, #13]
					/* Write the high byte */
					voidWriteData(Data);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f872 	bl	8001560 <voidWriteData>
					/* Write the low byte */
					Data =  TFT_WIGHT & 0xff;
 800147c:	23ff      	movs	r3, #255	; 0xff
 800147e:	737b      	strb	r3, [r7, #13]
					voidWriteData(Data);
 8001480:	7b7b      	ldrb	r3, [r7, #13]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f86c 	bl	8001560 <voidWriteData>
 8001488:	e00d      	b.n	80014a6 <TFT_voidDrawLetter+0xc6>

				}
				else
				{
					Data = Color >> 8;
 800148a:	88bb      	ldrh	r3, [r7, #4]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	b29b      	uxth	r3, r3
 8001490:	737b      	strb	r3, [r7, #13]
					/* Write the high byte */
					voidWriteData(Data);
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f863 	bl	8001560 <voidWriteData>
					/* Write the low byte */
					Data = Color& 0xff;
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	737b      	strb	r3, [r7, #13]
					voidWriteData(Data);
 800149e:	7b7b      	ldrb	r3, [r7, #13]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f85d 	bl	8001560 <voidWriteData>
			for (s8 x = 0 ; x<=7; x++)
 80014a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	73bb      	strb	r3, [r7, #14]
 80014b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014b6:	2b07      	cmp	r3, #7
 80014b8:	ddcc      	ble.n	8001454 <TFT_voidDrawLetter+0x74>
		for (s8 y =0 ; y<=7; y++)
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	ddbf      	ble.n	800144e <TFT_voidDrawLetter+0x6e>
				}

			}

		}
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <TFT_voidDrawString>:


void TFT_voidDrawString(u8 xpos, u8 ypos,u8 * PtrStr,u16 Color)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	603a      	str	r2, [r7, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
 80014e6:	460b      	mov	r3, r1
 80014e8:	71bb      	strb	r3, [r7, #6]
 80014ea:	4613      	mov	r3, r2
 80014ec:	80bb      	strh	r3, [r7, #4]
	u8 counter=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
	u8 space=0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73bb      	strb	r3, [r7, #14]
	while(PtrStr[counter]!='\0')
 80014f6:	e014      	b.n	8001522 <TFT_voidDrawString+0x4a>
	{
		TFT_voidDrawLetter( xpos+space, ypos ,letters[PtrStr[counter]] ,  Color);
 80014f8:	79fa      	ldrb	r2, [r7, #7]
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	4413      	add	r3, r2
 80014fe:	b2d8      	uxtb	r0, r3
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <TFT_voidDrawString+0x60>)
 800150c:	441a      	add	r2, r3
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	79b9      	ldrb	r1, [r7, #6]
 8001512:	f7ff ff65 	bl	80013e0 <TFT_voidDrawLetter>
		counter++;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	3301      	adds	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
		space+=10;
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	330a      	adds	r3, #10
 8001520:	73bb      	strb	r3, [r7, #14]
	while(PtrStr[counter]!='\0')
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e4      	bne.n	80014f8 <TFT_voidDrawString+0x20>
	}
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000000 	.word	0x20000000

0800153c <voidWriteCommand>:
}

/*****************************Private Functions***************************************/

static void voidWriteCommand(u8 Command)
		{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
		GPIO_voidSetPinValue(TFT_CMD_DATA_PIN,GPIO_LOW);
 8001546:	2200      	movs	r2, #0
 8001548:	210b      	movs	r1, #11
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fa5a 	bl	8000a04 <GPIO_voidSetPinValue>
		SPI_Send(Command);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fba2 	bl	8000c9c <SPI_Send>
		}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <voidWriteData>:

static void voidWriteData(u8 Data)
		{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
		GPIO_voidSetPinValue(TFT_CMD_DATA_PIN,GPIO_HIGH);
 800156a:	2201      	movs	r2, #1
 800156c:	210b      	movs	r1, #11
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fa48 	bl	8000a04 <GPIO_voidSetPinValue>
		SPI_Send(Data);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb90 	bl	8000c9c <SPI_Send>
		}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <main>:

#define TEST_EXT 0

#if (TEST_EXT == 0)
int main()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
	TFT_voidInit();
 800158a:	f7ff fe63 	bl	8001254 <TFT_voidInit>
	int initialX = 1, initialY = 1, initialLength = 0;
 800158e:	2301      	movs	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	2301      	movs	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
	initializeSnake(initialX, initialY, initialLength);
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f7ff fbec 	bl	8000d7c <initializeSnake>
	initializeFood(2, 2, DOWN); // Initial food position and direction
 80015a4:	2204      	movs	r2, #4
 80015a6:	2102      	movs	r1, #2
 80015a8:	2002      	movs	r0, #2
 80015aa:	f7ff fc19 	bl	8000de0 <initializeFood>
	NVIC_Init();
 80015ae:	f7ff fa8b 	bl	8000ac8 <NVIC_Init>
	ControlEXT(NVIC_EXTI0,MoveSnakeUp);
 80015b2:	490f      	ldr	r1, [pc, #60]	; (80015f0 <main+0x6c>)
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff fe27 	bl	8001208 <ControlEXT>
	ControlEXT(NVIC_EXTI1,MoveSnakeLeft);
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <main+0x70>)
 80015bc:	2007      	movs	r0, #7
 80015be:	f7ff fe23 	bl	8001208 <ControlEXT>
	ControlEXT(NVIC_EXTI2,MoveSnakeDown);
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <main+0x74>)
 80015c4:	2008      	movs	r0, #8
 80015c6:	f7ff fe1f 	bl	8001208 <ControlEXT>
	ControlEXT(NVIC_EXTI3,MoveSnakeRight);
 80015ca:	490c      	ldr	r1, [pc, #48]	; (80015fc <main+0x78>)
 80015cc:	2009      	movs	r0, #9
 80015ce:	f7ff fe1b 	bl	8001208 <ControlEXT>
	// TFT_voidDrawRect(0, 32, 128, 160, TFT_BLACK);
	TFT_voidDrawString(16,150,"Snake Game",TFT_BLACK);
 80015d2:	2300      	movs	r3, #0
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <main+0x7c>)
 80015d6:	2196      	movs	r1, #150	; 0x96
 80015d8:	2010      	movs	r0, #16
 80015da:	f7ff ff7d 	bl	80014d8 <TFT_voidDrawString>
	while (1)
	{
		draw();
 80015de:	f7ff fd03 	bl	8000fe8 <draw>
		moveSnake(dir);
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <main+0x80>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fc62 	bl	8000eb0 <moveSnake>
		draw();
 80015ec:	e7f7      	b.n	80015de <main+0x5a>
 80015ee:	bf00      	nop
 80015f0:	080011a9 	.word	0x080011a9
 80015f4:	080011d9 	.word	0x080011d9
 80015f8:	080011c1 	.word	0x080011c1
 80015fc:	080011f1 	.word	0x080011f1
 8001600:	080016bc 	.word	0x080016bc
 8001604:	20000462 	.word	0x20000462

08001608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800160a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800160c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopForever+0x6>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopForever+0xe>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopForever+0x16>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001636:	f000 f811 	bl	800165c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163a:	f7ff ffa3 	bl	8001584 <main>

0800163e <LoopForever>:

LoopForever:
  b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   r0, =_estack
 8001640:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 800164c:	080016d0 	.word	0x080016d0
  ldr r2, =_sbss
 8001650:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8001654:	20000528 	.word	0x20000528

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <__libc_init_array>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	2600      	movs	r6, #0
 8001660:	4d0c      	ldr	r5, [pc, #48]	; (8001694 <__libc_init_array+0x38>)
 8001662:	4c0d      	ldr	r4, [pc, #52]	; (8001698 <__libc_init_array+0x3c>)
 8001664:	1b64      	subs	r4, r4, r5
 8001666:	10a4      	asrs	r4, r4, #2
 8001668:	42a6      	cmp	r6, r4
 800166a:	d109      	bne.n	8001680 <__libc_init_array+0x24>
 800166c:	f000 f81a 	bl	80016a4 <_init>
 8001670:	2600      	movs	r6, #0
 8001672:	4d0a      	ldr	r5, [pc, #40]	; (800169c <__libc_init_array+0x40>)
 8001674:	4c0a      	ldr	r4, [pc, #40]	; (80016a0 <__libc_init_array+0x44>)
 8001676:	1b64      	subs	r4, r4, r5
 8001678:	10a4      	asrs	r4, r4, #2
 800167a:	42a6      	cmp	r6, r4
 800167c:	d105      	bne.n	800168a <__libc_init_array+0x2e>
 800167e:	bd70      	pop	{r4, r5, r6, pc}
 8001680:	f855 3b04 	ldr.w	r3, [r5], #4
 8001684:	4798      	blx	r3
 8001686:	3601      	adds	r6, #1
 8001688:	e7ee      	b.n	8001668 <__libc_init_array+0xc>
 800168a:	f855 3b04 	ldr.w	r3, [r5], #4
 800168e:	4798      	blx	r3
 8001690:	3601      	adds	r6, #1
 8001692:	e7f2      	b.n	800167a <__libc_init_array+0x1e>
 8001694:	080016c8 	.word	0x080016c8
 8001698:	080016c8 	.word	0x080016c8
 800169c:	080016c8 	.word	0x080016c8
 80016a0:	080016cc 	.word	0x080016cc

080016a4 <_init>:
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	bf00      	nop
 80016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016aa:	bc08      	pop	{r3}
 80016ac:	469e      	mov	lr, r3
 80016ae:	4770      	bx	lr

080016b0 <_fini>:
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	bf00      	nop
 80016b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b6:	bc08      	pop	{r3}
 80016b8:	469e      	mov	lr, r3
 80016ba:	4770      	bx	lr
